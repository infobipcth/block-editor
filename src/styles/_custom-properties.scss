@use 'sass:color';
@use "functions" as funcs;

@mixin admin-scheme($color-primary) {
	// Define RGB equivalents for use in rgba function.
	// Hexadecimal css vars do not work in the rgba function.
	--wp-admin-theme-color: #{$color-primary};
	--wp-admin-theme-color--rgb: #{funcs.hex-to-rgb($color-primary)};
	// Darker shades.
	--wp-admin-theme-color-darker-10: #{color.adjust($color-primary, $lightness: 5%)};
	--wp-admin-theme-color-darker-10--rgb: #{funcs.hex-to-rgb(color.adjust($color-primary, $lightness: 5%))};
	--wp-admin-theme-color-darker-20: #{color.adjust($color-primary, $lightness: 10%)};
	--wp-admin-theme-color-darker-20--rgb: #{funcs.hex-to-rgb(color.adjust($color-primary, $lightness: 10%))};

	// Focus style width.
	// Avoid rounding issues by showing a whole 2px for 1x screens, and 1.5px on high resolution screens.
	--wp-admin-border-width-focus: 2px;

	@media ( -webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		& {
			--wp-admin-border-width-focus: 1.5px;
		}
	}
}

// It is important to include these styles in all built stylesheets.
// This allows to CSS variables post CSS plugin to generate fallbacks.
// It also provides default CSS variables for npm package consumers.
:root {
	@include admin-scheme(#007cba);

	& {
		--wp-block-synced-color: #7a00df;
		--wp-block-synced-color--rgb: #{funcs.hex-to-rgb(#7a00df)};
		// This CSS variable is not used in Gutenberg project,
		// but is maintained for backwards compatibility.
		--wp-bound-block-color: var(--wp-block-synced-color);

	}
}
